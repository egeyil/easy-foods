generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String
  password  String
  bio       String?
  likedPost Recipe[]  @relation("RecipeRatedUsers")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  image     String?
  recipes   Recipe[]
  comments  Comment[] @relation("CommentAuthor")
  favorites Recipe[]  @relation("FavoriteRecipes")

  @@index([id])
}

model Recipe {
  id                     Int          @id @default(autoincrement())
  title                  String
  content                String
  image                  String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  authorId               String
  rating                 Float        @default(0)
  ratingsCount           Int          @default(0)
  published              Boolean      @default(false)
  categoryId             String
  description            String?
  steps                  Json?
  servings               Int?
  time                   String?
  goesWithParentRecipeId Int?
  tips                   Json?
  ingredients            Ingredient[] @relation("RecipeTags")
  author                 User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  ratedUsers             User[]       @relation("RecipeRatedUsers")
  comments               Comment[]    @relation("CommentPost")
  category               Category     @relation(fields: [categoryId], references: [id])
  difficulty             Difficulty
  tags                   Tag[]        @relation("RecipeTags")
  goesWith               Recipe[]     @relation("GoesWith")
  goesWithParentRecipe   Recipe?      @relation("GoesWith", fields: [goesWithParentRecipeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  favorites              User[]       @relation("FavoriteRecipes")
  recipeId               Int?

  @@index([goesWithParentRecipeId])
  @@index([categoryId])
  @@index([authorId])
  @@map("Post")
}

model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String
  quantity  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipes   Recipe[] @relation("RecipeTags")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipes   Recipe[] @relation("RecipeTags")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Comment {
  id              String    @id @default(uuid())
  content         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  author          User      @relation(fields: [authorId], references: [id], name: "CommentAuthor", onDelete: Cascade)
  authorId        String
  recipe          Recipe    @relation(fields: [recipeId], references: [id], name: "CommentPost", onDelete: Cascade)
  recipeId        Int
  parentComment   Comment?  @relation("SubComment", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentCommentId String?
  subComments     Comment[] @relation("SubComment")
  likes           Int       @default(0)

  @@index([parentCommentId])
  @@index([authorId])
  @@index([recipeId])
}

model Category {
  id               String     @id @default(uuid())
  name             String
  image            String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  recipes          Recipe[]
  subCategories    Category[] @relation("SubCategory")
  parentCategory   Category?  @relation("SubCategory", fields: [parentCategoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentCategoryId String?
  isSubCategory    Boolean    @default(false)

  @@index([parentCategoryId])
}
